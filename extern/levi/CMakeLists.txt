cmake_minimum_required(VERSION 3.5)

# ouptut paths
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")

# Build shared libs
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

if(MSVC)
    set(CMAKE_DEBUG_POSTFIX "d")
endif()

option(BUILD_SHARED_LIBS "Build libraries as shared as opposed to static" ON)

set(LEVI_CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
list(APPEND CMAKE_MODULE_PATH ${LEVI_CMAKE_MODULE_PATH})

# Enable C++14
set(CMAKE_CXX_EXTENSIONS OFF)
if (MSVC) #Workaround to fix Eigen alignement problems when using fixed size matrices
    set(CMAKE_CXX_STANDARD 17)
else()
    set(CMAKE_CXX_STANDARD 14)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)


# include macros for warnings
include(AddWarningsConfigurationToTargets)
include(CMakePackageConfigHelpers)

project(levi
        LANGUAGES CXX
        VERSION 0.0.101)

include(GNUInstallDirs)

option(ENABLE_RPATH "Enable RPATH for this library" ON)
mark_as_advanced(ENABLE_RPATH)
include(AddInstallRPATHSupport)
add_install_rpath_support(BIN_DIRS "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}"
                          LIB_DIRS "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}"
                          DEPENDS ENABLE_RPATH
                          USE_LINK_PATH)

# Encourage user to specify a build type (e.g. Release, Debug, etc.), otherwise set it to Release.
if(NOT CMAKE_CONFIGURATION_TYPES)
  if(NOT CMAKE_BUILD_TYPE)
      message(STATUS "Setting build type to 'Release' as none was specified.")
      set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
  endif()
endif()

find_package(Eigen3 REQUIRED)
find_package(shlibpp REQUIRED)

set(LIBRARY_TARGET_NAME ${PROJECT_NAME})

add_library(${LIBRARY_TARGET_NAME} INTERFACE)
add_library(${PROJECT_NAME}::${LIBRARY_TARGET_NAME} ALIAS ${LIBRARY_TARGET_NAME})
target_include_directories(${LIBRARY_TARGET_NAME} INTERFACE ${EIGEN3_INCLUDE_DIR})
target_include_directories(${LIBRARY_TARGET_NAME} INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
target_include_directories(${LIBRARY_TARGET_NAME} INTERFACE $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/autogenerated>)
target_include_directories(${LIBRARY_TARGET_NAME} INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
target_link_libraries(${LIBRARY_TARGET_NAME} INTERFACE levi::zupply)
target_link_libraries(${LIBRARY_TARGET_NAME} INTERFACE shlibpp::shlibpp)



# install
install(TARGETS ${LIBRARY_TARGET_NAME}
        EXPORT ${PROJECT_NAME}
        COMPONENT runtime
        RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}" COMPONENT bin
        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib
        ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT lib
        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install(EXPORT ${LIBRARY_TARGET_NAME}
        NAMESPACE ${PROJECT_NAME}::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

configure_package_config_file(${PROJECT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in
                              ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
                              INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

write_basic_package_version_file(${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake  VERSION ${PROJECT_VERSION} COMPATIBILITY SameMajorVersion )

install(FILES ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake ${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include)

set(LEVI_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake/CMakeLists.auto" "${PROJECT_BINARY_DIR}/autogenerated/levi/autogenerated/CMakeLists.auto" @ONLY)
install(FILES ${PROJECT_BINARY_DIR}/autogenerated/levi/autogenerated/CMakeLists.auto DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/levi/autogenerated)

set (LEVI_AUTOGENERATED_DIR "${PROJECT_BINARY_DIR}/autogenerated/levi/autogenerated")
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake/Path.auto" "${PROJECT_BINARY_DIR}/autogenerated/levi/autogenerated/Path.h" @ONLY)

set (LEVI_AUTOGENERATED_DIR "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/levi/autogenerated")
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake/Path.auto" "${PROJECT_BINARY_DIR}/autogenerated/Path.auto.install" @ONLY)
install(FILES ${PROJECT_BINARY_DIR}/autogenerated/Path.auto.install DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/levi/autogenerated RENAME Path.h)

if (NOT TARGET uninstall)
    include(AddUninstallTarget)
endif()

add_subdirectory(deps)

include(CTest)
if(BUILD_TESTING)
   add_subdirectory(tests)
endif()


